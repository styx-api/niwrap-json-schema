{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "asl_file",
  "description": "ASL data manipulation tool for FSL",
  "type": "object",
  "properties": {
    "@type": {
      "const": "fsl.asl_file"
    },
    "datafile": {
      "type": "string",
      "x-styx-type": "file",
      "title": "Data file",
      "description": "ASL data file"
    },
    "ntis": {
      "type": "number",
      "title": "Number of TIs",
      "description": "Number of TIs in the file"
    },
    "mask": {
      "anyOf": [
        {
          "type": "string",
          "x-styx-type": "file"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Mask",
      "description": "Mask file"
    },
    "inblockform": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Input block format",
      "description": "Input block format"
    },
    "inaslform": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Input ASL form",
      "description": "ASL data form"
    },
    "rpts": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Repeats",
      "description": "Number of repeats at each TI as comma separated list, not required if the number of repeats is same for all TIs  (only for use with --ibf=tis)"
    },
    "pairs": {
      "type": "boolean",
      "default": false,
      "title": "Pairs",
      "description": "Data contains adjacent pairs of measurements (e.g. Tag, Control) DEPRECATED use --iaf instead"
    },
    "spairs": {
      "type": "boolean",
      "default": false,
      "title": "Split pairs",
      "description": "Split the pairs within the data, e.g. to separate tag and control images in output"
    },
    "diff": {
      "type": "boolean",
      "default": false,
      "title": "Difference",
      "description": "Take the difference between the pairs, i.e., Tag-control difference"
    },
    "surrdiff": {
      "type": "boolean",
      "default": false,
      "title": "Surround subtraction",
      "description": "Do surround subtraction on the pairs"
    },
    "extrapolate": {
      "type": "boolean",
      "default": false,
      "title": "Extrapolate",
      "description": "Option to extrapolate the edge of the brain to fix the artefact on the edge of the brain"
    },
    "neighbour": {
      "anyOf": [
        {
          "type": "number",
          "minimum": 3,
          "maximum": 9
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Neighbour size",
      "description": "Neighbour size for extrapolation, must be an odd number between 3 and 9. Default: 5"
    },
    "pvgm": {
      "anyOf": [
        {
          "type": "string",
          "x-styx-type": "file"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "GM partial volume map",
      "description": "GM partial volume map"
    },
    "pvwm": {
      "anyOf": [
        {
          "type": "string",
          "x-styx-type": "file"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "WM partial volume map",
      "description": "WM partial volume map"
    },
    "kernel": {
      "anyOf": [
        {
          "type": "number",
          "minimum": 3,
          "maximum": 9
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Kernel size",
      "description": "Kernel size (in voxels) of partial volume correction, must be an odd number between 3 and 9. Default: 5"
    },
    "outfile": {
      "type": "string",
      "title": "Output file",
      "description": "Output data file"
    },
    "outblockform": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Output block format",
      "description": "Output block format"
    },
    "mean": {
      "type": "boolean",
      "default": false,
      "title": "Mean output",
      "description": "Output ASL data having taken mean at each TI to file"
    },
    "split": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Split output",
      "description": "Split data into separate files for each TI, specify filename root"
    },
    "epoch": {
      "type": "boolean",
      "default": false,
      "title": "Epoch output",
      "description": "Output epochs of ASL data (takes mean at each TI within the epoch)"
    },
    "epoch_length": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Epoch length",
      "description": "Length of epochs in number of repeats"
    },
    "epoch_overlap": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Epoch overlap",
      "description": "Amount of overlap between epochs in number of repeats"
    },
    "epoch_unit": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Epoch unit",
      "description": "Epochs to be determined over"
    },
    "deconv": {
      "type": "boolean",
      "default": false,
      "title": "Deconvolution",
      "description": "Deconvolution of data with arterial input functions"
    },
    "aif": {
      "anyOf": [
        {
          "type": "string",
          "x-styx-type": "file"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Arterial input functions",
      "description": "Arterial input functions for deconvolution (4D volume, one aif for each voxel within mask)"
    },
    "help": {
      "type": "boolean",
      "default": false,
      "title": "Help",
      "description": "Display the help message"
    },
    "version": {
      "type": "boolean",
      "default": false,
      "title": "Version",
      "description": "Display version identification"
    }
  },
  "additionalProperties": false,
  "required": [
    "datafile",
    "ntis",
    "outfile"
  ]
}