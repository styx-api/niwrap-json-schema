{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "sccan",
  "description": "A tool for sparse statistical analysis on images : scca, pscca (with options), mscca. Can also convert an imagelist/mask pair to a binary matrix image.",
  "type": "object",
  "properties": {
    "@type": {
      "const": "ants/sccan"
    },
    "output": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Output",
      "description": "Output dependent on which option is called."
    },
    "n_permutations": {
      "anyOf": [
        {
          "type": "integer"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Number of Permutations",
      "description": "Number of permutations to use in scca."
    },
    "smoother": {
      "anyOf": [
        {
          "type": "integer"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Smoother",
      "description": "Smoothing function for variates."
    },
    "row_sparseness": {
      "anyOf": [
        {
          "type": "integer"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Row Sparseness",
      "description": "Row sparseness - if (+) then keep values (+) otherwise allow +/- values --- always L1."
    },
    "iterations": {
      "anyOf": [
        {
          "type": "integer",
          "minimum": 20
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Iterations",
      "description": "Max iterations for scca optimization (min 20)."
    },
    "n_eigenvectors": {
      "anyOf": [
        {
          "type": "integer"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Number of Eigenvectors",
      "description": "Number of eigenvectors to compute in scca/spca."
    },
    "robustify": {
      "anyOf": [
        {
          "type": "integer"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Robustify",
      "description": "Rank-based scca."
    },
    "covering": {
      "anyOf": [
        {
          "type": "integer"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Covering",
      "description": "Try to make the decomposition cover the whole domain, if possible."
    },
    "uselong": {
      "anyOf": [
        {
          "type": "integer"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Use Longitudinal Formulation",
      "description": "Use longitudinal formulation (> 0) or not (<= 0)."
    },
    "l1": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "L1 Penalty",
      "description": "Use l1 (> 0) or l0 (< 0) penalty, also sets gradient step size."
    },
    "pclusterthresh": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "P Cluster Threshold",
      "description": "Cluster threshold on view P."
    },
    "qclusterthresh": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Q Cluster Threshold",
      "description": "Cluster threshold on view Q."
    },
    "ridge_cca": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Ridge CCA",
      "description": "Ridge cca."
    },
    "initialization": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Initialization",
      "description": "Initialization file list for Eigenanatomy - must also pass mask option."
    },
    "initialization2": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Initialization 2",
      "description": "Initialization file list for SCCAN-Eigenanatomy - must also pass mask option."
    },
    "mask": {
      "anyOf": [
        {
          "type": "string",
          "x-styx-type": "file"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Mask",
      "description": "Mask file for Eigenanatomy initialization."
    },
    "mask2": {
      "anyOf": [
        {
          "type": "string",
          "x-styx-type": "file"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Mask 2",
      "description": "Mask file for Eigenanatomy initialization 2."
    },
    "partial_scca_option": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Partial SCCA Option",
      "description": "Choices for pscca: PQ, PminusRQ, PQminusR, PminusRQminusR."
    },
    "prior_weight": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Prior Weight",
      "description": "Scalar value weight on prior between 0 (prior is weak) and 1 (prior is strong). Only engaged if initialization is used."
    },
    "get_small": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Get Small",
      "description": "Find smallest eigenvectors."
    },
    "verbose": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Verbose",
      "description": "Set whether output is verbose."
    },
    "imageset_to_matrix": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Imageset to Matrix",
      "description": "Takes a list of image files names (one per line) and converts it to a 2D matrix/image in binary or csv format."
    },
    "timeseriesimage_to_matrix": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Timeseries Image to Matrix",
      "description": "Takes a timeseries (4D) image and converts it to a 2D matrix csv format."
    },
    "vector_to_image": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Vector to Image",
      "description": "Converts the 1st column vector in a csv file back to an image."
    },
    "imageset_to_projections": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Imageset to Projections",
      "description": "Takes a list of image and projection files names and writes them to a csv file."
    },
    "scca": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "SCCA",
      "description": "Matrix-based scca operations for 2 and 3 views."
    },
    "svd": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "SVD",
      "description": "A sparse SVD implementation."
    }
  },
  "additionalProperties": false
}