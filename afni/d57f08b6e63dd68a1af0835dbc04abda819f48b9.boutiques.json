{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "description": "Compute voxel-wise statistics using AFNI 3dTstat command",
  "type": "object",
  "properties": {
    "@type": {
      "const": "afni.3dTstat"
    },
    "in_file": {
      "type": "string",
      "title": "In file",
      "description": "Input file to 3dtstat."
    },
    "mask": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Mask",
      "description": "Mask file."
    },
    "num_threads": {
      "anyOf": [
        {
          "type": "integer"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Num threads",
      "description": "Set number of threads."
    },
    "options": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Options",
      "description": "Selected statistical output."
    },
    "outputtype": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Outputtype",
      "description": "'nifti' or 'afni' or 'nifti_gz'. Afni output filetype."
    },
    "sum": {
      "type": "boolean",
      "default": false,
      "title": "Sum",
      "description": "Compute sum of input voxels."
    },
    "abssum": {
      "type": "boolean",
      "default": false,
      "title": "Absolute Sum",
      "description": "Compute absolute sum of input voxels."
    },
    "sos": {
      "type": "boolean",
      "default": false,
      "title": "Sum of Squares",
      "description": "Compute sum of squares."
    },
    "l2norm": {
      "type": "boolean",
      "default": false,
      "title": "L2 Norm",
      "description": "Compute L2 norm (sqrt(sum squares))."
    },
    "mean": {
      "type": "boolean",
      "default": false,
      "title": "Mean",
      "description": "Compute mean of input voxels."
    },
    "slope": {
      "type": "boolean",
      "default": false,
      "title": "Slope",
      "description": "Compute the slope of input voxels vs. time."
    },
    "stdev": {
      "type": "boolean",
      "default": false,
      "title": "Standard Deviation",
      "description": "Compute standard deviation of input voxels."
    },
    "stdevNOD": {
      "type": "boolean",
      "default": false,
      "title": "Standard Deviation No Detrending",
      "description": "Compute standard deviation of input voxels without detrending."
    },
    "cvar": {
      "type": "boolean",
      "default": false,
      "title": "Coefficient of Variation",
      "description": "Compute coefficient of variation of input voxels."
    },
    "cvarNOD": {
      "type": "boolean",
      "default": false,
      "title": "Coefficient of Variation No Detrending",
      "description": "Compute coefficient of variation of input voxels without detrending."
    },
    "cvarinv": {
      "type": "boolean",
      "default": false,
      "title": "Inverse Coefficient of Variation",
      "description": "Compute inverse coefficient of variation of input voxels."
    },
    "cvarinvNOD": {
      "type": "boolean",
      "default": false,
      "title": "Inverse Coefficient of Variation No Detrending",
      "description": "Compute inverse coefficient of variation of input voxels without detrending."
    },
    "tsnr": {
      "type": "boolean",
      "default": false,
      "title": "Temporal Signal to Noise Ratio",
      "description": "Compute temporal signal to noise ratio."
    },
    "MAD": {
      "type": "boolean",
      "default": false,
      "title": "Median Absolute Deviation",
      "description": "Compute median absolute deviation of input voxels."
    },
    "DW": {
      "type": "boolean",
      "default": false,
      "title": "Durbin-Watson Statistic",
      "description": "Compute Durbin-Watson Statistic of input voxels."
    },
    "median": {
      "type": "boolean",
      "default": false,
      "title": "Median",
      "description": "Compute median of input voxels."
    },
    "nzmedian": {
      "type": "boolean",
      "default": false,
      "title": "Non-Zero Median",
      "description": "Compute median of non-zero input voxels."
    },
    "nzstdev": {
      "type": "boolean",
      "default": false,
      "title": "Non-Zero Standard Deviation",
      "description": "Compute standard deviation of non-zero input voxels."
    },
    "bmv": {
      "type": "boolean",
      "default": false,
      "title": "Biweight Midvariance",
      "description": "Compute biweight midvariance of input voxels."
    },
    "MSSD": {
      "type": "boolean",
      "default": false,
      "title": "Mean of Successive Squared Differences",
      "description": "Compute mean of successive squared differences of input voxels."
    },
    "MSSDsqrt": {
      "type": "boolean",
      "default": false,
      "title": "Square Root of MSSD",
      "description": "Compute square root of mean of successive squared differences of input voxels."
    },
    "MASDx": {
      "type": "boolean",
      "default": false,
      "title": "Median of Absolute Values of First Time Differences",
      "description": "Compute median of absolute values of first time differences of input voxels."
    },
    "min": {
      "type": "boolean",
      "default": false,
      "title": "Minimum",
      "description": "Compute minimum of input voxels."
    },
    "max": {
      "type": "boolean",
      "default": false,
      "title": "Maximum",
      "description": "Compute maximum of input voxels."
    },
    "absmax": {
      "type": "boolean",
      "default": false,
      "title": "Absolute Maximum",
      "description": "Compute absolute maximum of input voxels."
    },
    "signed_absmax": {
      "type": "boolean",
      "default": false,
      "title": "Signed Absolute Maximum",
      "description": "Compute signed absolute maximum of input voxels."
    },
    "percentile": {
      "type": "boolean",
      "default": false,
      "title": "Percentile",
      "description": "Compute the P-th percentile point of the data in each voxel time series."
    },
    "argmin": {
      "type": "boolean",
      "default": false,
      "title": "Index of Minimum",
      "description": "Compute index of minimum of input voxels."
    },
    "argmin1": {
      "type": "boolean",
      "default": false,
      "title": "Index + 1 of Minimum",
      "description": "Compute index + 1 of minimum of input voxels."
    },
    "argmax": {
      "type": "boolean",
      "default": false,
      "title": "Index of Maximum",
      "description": "Compute index of maximum of input voxels."
    },
    "argmax1": {
      "type": "boolean",
      "default": false,
      "title": "Index + 1 of Maximum",
      "description": "Compute index + 1 of maximum of input voxels."
    },
    "argabsmax": {
      "type": "boolean",
      "default": false,
      "title": "Index of Absolute Maximum",
      "description": "Compute index of absolute maximum of input voxels."
    },
    "argabsmax1": {
      "type": "boolean",
      "default": false,
      "title": "Index + 1 of Absolute Maximum",
      "description": "Compute index + 1 of absolute maximum of input voxels."
    },
    "duration": {
      "type": "boolean",
      "default": false,
      "title": "Duration",
      "description": "Compute number of points around max above a threshold."
    },
    "onset": {
      "type": "boolean",
      "default": false,
      "title": "Onset",
      "description": "Compute beginning of duration around max where value exceeds basepercent."
    },
    "offset": {
      "type": "boolean",
      "default": false,
      "title": "Offset",
      "description": "Compute end of duration around max where value exceeds basepercent."
    },
    "centroid": {
      "type": "boolean",
      "default": false,
      "title": "Centroid",
      "description": "Compute centroid of data time curves."
    },
    "centduration": {
      "type": "boolean",
      "default": false,
      "title": "Centroid Duration",
      "description": "Compute duration using centroid's index as center."
    },
    "nzmean": {
      "type": "boolean",
      "default": false,
      "title": "Non-Zero Mean",
      "description": "Compute mean of non-zero voxels."
    },
    "zcount": {
      "type": "boolean",
      "default": false,
      "title": "Zero Count",
      "description": "Count number of zero values at each voxel."
    },
    "nzcount": {
      "type": "boolean",
      "default": false,
      "title": "Non-Zero Count",
      "description": "Count number of non-zero values at each voxel."
    },
    "autocorr": {
      "type": "boolean",
      "default": false,
      "title": "Autocorrelation",
      "description": "Compute autocorrelation function and return first n coefficients."
    },
    "autoreg": {
      "type": "boolean",
      "default": false,
      "title": "Autoregression",
      "description": "Compute autoregression coefficients and return first n coefficients."
    },
    "accumulate": {
      "type": "boolean",
      "default": false,
      "title": "Accumulate",
      "description": "Accumulate time series values (partial sums)."
    },
    "centromean": {
      "type": "boolean",
      "default": false,
      "title": "Centromean",
      "description": "Compute mean of middle 50% of voxel values."
    },
    "skewness": {
      "type": "boolean",
      "default": false,
      "title": "Skewness",
      "description": "Measure of asymmetry in distribution."
    },
    "kurtosis": {
      "type": "boolean",
      "default": false,
      "title": "Kurtosis",
      "description": "Measure of the 'tailedness' of the probability distribution."
    },
    "firstvalue": {
      "type": "boolean",
      "default": false,
      "title": "First Value",
      "description": "First value in dataset."
    },
    "tdiff": {
      "type": "boolean",
      "default": false,
      "title": "First Difference",
      "description": "Take the first difference of each time series before further processing."
    },
    "prefix": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Prefix",
      "description": "Use string 'p' for the prefix of the output dataset [DEFAULT = 'stat']."
    },
    "datum": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Datum",
      "description": "Use data type 'd' for the type of storage of the output, where 'd' is one of 'byte', 'short', or 'float' [DEFAULT=float]."
    },
    "nscale": {
      "type": "boolean",
      "default": false,
      "title": "No Scale",
      "description": "Do not scale output values when datum is byte or short. Scaling is done by default."
    },
    "basepercent": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Base Percent",
      "description": "Percentage of maximum for duration calculation."
    },
    "mask_mset": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Mask Mset",
      "description": "Use the dataset 'mset' as a mask. Only voxels with nonzero values in 'mset' will be printed from 'dataset'."
    },
    "mrange": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Mask Range",
      "description": "Further restrict the voxels from 'mset' so that only those mask values between 'a' and 'b' (inclusive) will be used."
    },
    "cmask": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Cmask",
      "description": "Execute the options enclosed in single quotes as a 3dcalc-like program, and produce a mask from the resulting 3D brick."
    }
  },
  "additionalProperties": false,
  "required": [
    "in_file"
  ]
}