{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "description": "Computes path coefficients for connection matrix in Structural Equation Modeling (SEM).",
  "type": "object",
  "properties": {
    "__STYXTYPE__": {
      "const": "1dSEM"
    },
    "theta": {
      "type": "string",
      "title": "Theta File",
      "description": "Connection matrix 1D file with initial representation"
    },
    "correlation_matrix": {
      "type": "string",
      "title": "Correlation Matrix",
      "description": "Correlation matrix 1D file"
    },
    "residual_variance": {
      "type": "string",
      "title": "Residual Variance",
      "description": "Residual variance vector 1D file"
    },
    "degrees_of_freedom": {
      "type": "number",
      "title": "Degrees of Freedom",
      "description": "Degrees of freedom"
    },
    "max_iterations": {
      "anyOf": [
        {
          "type": "integer"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Maximum Iterations",
      "description": "Maximum number of iterations for convergence (Default=10000). Values can range from 1 to any positive integer less than 10000."
    },
    "number_random_trials": {
      "anyOf": [
        {
          "type": "integer"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Random Trials",
      "description": "Number of random trials before optimization (Default = 100)."
    },
    "limits": {
      "anyOf": [
        {
          "type": "array",
          "items": {
            "type": "number"
          },
          "minItems": 2,
          "maxItems": 2
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Limits",
      "description": "Lower and upper limits for connection coefficients (Default = -1.0 to 1.0)"
    },
    "calculate_cost": {
      "type": "boolean",
      "default": false,
      "title": "Calculate Cost Flag",
      "description": "No modeling at all, just calculate the cost function for the coefficients as given in the theta file."
    },
    "verbose": {
      "anyOf": [
        {
          "type": "integer"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Verbose",
      "description": "Print info every nnnnn steps"
    },
    "tree_growth": {
      "type": "boolean",
      "default": false,
      "title": "Tree Growth Flag",
      "description": "Search for best model by growing a model for one additional coefficient from the previous model for n-1 coefficients."
    },
    "model_search": {
      "type": "boolean",
      "default": false,
      "title": "Model Search Flag",
      "description": "Search for best model by growing a model for one additional coefficient from the previous model for n-1 coefficients."
    },
    "max_paths": {
      "anyOf": [
        {
          "type": "integer"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Maximum Paths",
      "description": "Maximum number of paths to include (Default = 1000)."
    },
    "stop_cost": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Stop Cost",
      "description": "Stop searching for paths when cost function is below this value (Default = 0.1)."
    },
    "forest_growth": {
      "type": "boolean",
      "default": false,
      "title": "Forest Growth Flag",
      "description": "Search over all possible models by comparing models at incrementally increasing number of path coefficients."
    },
    "grow_all": {
      "type": "boolean",
      "default": false,
      "title": "Grow All Flag",
      "description": "Search over all possible models by comparing models at incrementally increasing number of path coefficients."
    },
    "leafpicker": {
      "type": "boolean",
      "default": false,
      "title": "Leafpicker Flag",
      "description": "Expands the search optimization to look at multiple paths to avoid local minimum. This method is the default technique for tree growth and standard coefficient searches."
    }
  },
  "additionalProperties": false,
  "required": [
    "theta",
    "correlation_matrix",
    "residual_variance",
    "degrees_of_freedom"
  ]
}