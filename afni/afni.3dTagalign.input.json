{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "3dTagalign",
  "description": "Rotates/translates dataset 'dset' to be aligned with the master using the tagsets embedded in their .HEAD files",
  "type": "object",
  "properties": {
    "@type": {
      "const": "afni.3dTagalign"
    },
    "input_dataset": {
      "type": "string",
      "x-styx-type": "file",
      "title": "Input dataset",
      "description": "Input dataset to align"
    },
    "master_dataset": {
      "type": "string",
      "x-styx-type": "file",
      "title": "Master dataset",
      "description": "Use dataset 'mset' as the master dataset. This option is mandatory."
    },
    "tagset_file": {
      "anyOf": [
        {
          "type": "string",
          "x-styx-type": "file"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Tagset file",
      "description": "Use the tagset in the .tag file instead of dset."
    },
    "no_keep_tags": {
      "type": "boolean",
      "default": false,
      "title": "No keep tags flag",
      "description": "Don't put transformed locations of dset's tags into the output dataset [default = keep tags]."
    },
    "matvec_file": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Transformation matrix and vector file",
      "description": "Write the matrix+vector transformation to file 'mfile'. This can be used with 3dWarp's '-matvec_in2out' option to align other datasets in the same way (e.g., functional datasets)."
    },
    "rotate": {
      "type": "boolean",
      "default": false,
      "title": "Rotate flag",
      "description": "Compute the transformation as a rotation + shift (default)."
    },
    "affine": {
      "type": "boolean",
      "default": false,
      "title": "Affine transformation flag",
      "description": "Compute the transformation as a general affine map, where the matrix is a general 3x3 matrix."
    },
    "rotscl": {
      "type": "boolean",
      "default": false,
      "title": "Rotation and isotropic scaling flag",
      "description": "Compute transformation as a rotation times an isotropic scaling; where matrix is an orthogonal matrix times a scalar."
    },
    "prefix": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Output dataset prefix",
      "description": "Specify the prefix for the output dataset."
    },
    "verbose": {
      "type": "boolean",
      "default": false,
      "title": "Verbose flag",
      "description": "Print progress reports."
    },
    "dummy": {
      "type": "boolean",
      "default": false,
      "title": "Dummy flag",
      "description": "Don't actually rotate the dataset, just compute the transformation matrix and vector. If '-matvec' is used, the mfile will be written."
    },
    "linear_interpolation": {
      "type": "boolean",
      "default": false,
      "title": "Linear interpolation",
      "description": "Use linear interpolation method."
    },
    "cubic_interpolation": {
      "type": "boolean",
      "default": false,
      "title": "Cubic interpolation",
      "description": "Use cubic interpolation method (default)."
    },
    "nearest_neighbor_interpolation": {
      "type": "boolean",
      "default": false,
      "title": "Nearest neighbour interpolation",
      "description": "Use nearest neighbour interpolation method."
    },
    "quintic_interpolation": {
      "type": "boolean",
      "default": false,
      "title": "Quintic interpolation",
      "description": "Use quintic interpolation method."
    }
  },
  "additionalProperties": false,
  "required": [
    "input_dataset",
    "master_dataset"
  ]
}