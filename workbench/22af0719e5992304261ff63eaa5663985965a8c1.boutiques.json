{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "description": "Dump cifti matrix into other formats.\n\nThis command is used to convert a full CIFTI matrix to/from formats that can be used by programs that don't understand CIFTI.  You must specify exactly one of -to-gifti-ext, -from-gifti-ext, -to-nifti, -from-nifti, -to-text, or -from-text.\n\nIf you want to write an existing CIFTI file with a different CIFTI version, see -file-convert, and its -cifti-version-convert option.\n\nIf you want part of the CIFTI file as a metric, label, or volume file, see -cifti-separate.  If you want to create a CIFTI file from metric and/or volume files, see the -cifti-create-* commands.\n\nIf you want to import a matrix that is restricted to an ROI, first create a template CIFTI file matching that ROI using a -cifti-create-* command.  After importing to CIFTI, you can then expand the file into a standard brainordinates space with -cifti-create-dense-from-template.  If you want to export only part of a CIFTI file, first create an roi-restricted CIFTI file with -cifti-restrict-dense-mapping.\n\nThe -transpose option to -from-gifti-ext is needed if the replacement binary file is in column-major order.\n\nThe -unit options accept these values:\n\nSECOND\nHERTZ\nMETER\nRADIAN",
  "type": "object",
  "properties": {
    "@type": {
      "const": "workbench.cifti-convert"
    },
    "to_gifti_ext": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "@type": {
              "const": "to_gifti_ext"
            },
            "cifti_in": {
              "type": "string",
              "title": "cifti_in",
              "description": "the input cifti file"
            },
            "gifti_out": {
              "type": "string",
              "title": "gifti_out",
              "description": "output - the output gifti file"
            }
          },
          "additionalProperties": false,
          "description": "convert to GIFTI external binary",
          "required": [
            "cifti_in",
            "gifti_out"
          ]
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "convert to GIFTI external binary"
    },
    "from_gifti_ext": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "@type": {
              "const": "from_gifti_ext"
            },
            "gifti_in": {
              "type": "string",
              "title": "gifti_in",
              "description": "the input gifti file"
            },
            "cifti_out": {
              "type": "string",
              "title": "cifti_out",
              "description": "the output cifti file"
            },
            "reset_timepoints": {
              "anyOf": [
                {
                  "type": "object",
                  "properties": {
                    "@type": {
                      "const": "reset_timepoints"
                    },
                    "timestep": {
                      "type": "number",
                      "title": "timestep",
                      "description": "the desired time between frames"
                    },
                    "timestart": {
                      "type": "number",
                      "title": "timestart",
                      "description": "the desired time offset of the initial frame"
                    },
                    "opt_unit_unit": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "default": null,
                      "title": "opt_unit_unit",
                      "description": "use a unit other than time: unit identifier (default SECOND)"
                    }
                  },
                  "additionalProperties": false,
                  "description": "reset the mapping along rows to timepoints, taking length from the gifti file",
                  "required": [
                    "timestep",
                    "timestart"
                  ]
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "reset the mapping along rows to timepoints, taking length from the gifti file"
            },
            "opt_reset_scalars": {
              "type": "boolean",
              "default": false,
              "title": "opt_reset_scalars",
              "description": "reset mapping along rows to scalars, taking length from the gifti file"
            },
            "opt_column_reset_scalars": {
              "type": "boolean",
              "default": false,
              "title": "opt_column_reset_scalars",
              "description": "reset mapping along columns to scalar (useful for changing number of series in a sdseries file)"
            },
            "replace_binary": {
              "anyOf": [
                {
                  "type": "object",
                  "properties": {
                    "@type": {
                      "const": "replace_binary"
                    },
                    "binary_in": {
                      "type": "string",
                      "title": "binary_in",
                      "description": "the binary file that contains replacement data"
                    },
                    "opt_flip_endian": {
                      "type": "boolean",
                      "default": false,
                      "title": "opt_flip_endian",
                      "description": "byteswap the binary file"
                    },
                    "opt_transpose": {
                      "type": "boolean",
                      "default": false,
                      "title": "opt_transpose",
                      "description": "transpose the binary file"
                    }
                  },
                  "additionalProperties": false,
                  "description": "replace data with a binary file",
                  "required": [
                    "binary_in"
                  ]
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "replace data with a binary file"
            }
          },
          "additionalProperties": false,
          "description": "convert a GIFTI made with this command back into a CIFTI",
          "required": [
            "gifti_in",
            "cifti_out"
          ]
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "convert a GIFTI made with this command back into a CIFTI"
    },
    "to_nifti": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "@type": {
              "const": "to_nifti"
            },
            "cifti_in": {
              "type": "string",
              "title": "cifti_in",
              "description": "the input cifti file"
            },
            "nifti_out": {
              "type": "string",
              "title": "nifti_out",
              "description": "the output nifti file"
            },
            "opt_smaller_file": {
              "type": "boolean",
              "default": false,
              "title": "opt_smaller_file",
              "description": "use better-fitting dimension lengths"
            },
            "opt_smaller_dims": {
              "type": "boolean",
              "default": false,
              "title": "opt_smaller_dims",
              "description": "minimize the largest dimension, for tools that don't like large indices"
            }
          },
          "additionalProperties": false,
          "description": "convert to NIFTI1",
          "required": [
            "cifti_in",
            "nifti_out"
          ]
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "convert to NIFTI1"
    },
    "from_nifti": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "@type": {
              "const": "from_nifti"
            },
            "nifti_in": {
              "type": "string",
              "title": "nifti_in",
              "description": "the input nifti file"
            },
            "cifti_template": {
              "type": "string",
              "title": "cifti_template",
              "description": "a cifti file with the dimension(s) and mapping(s) that should be used"
            },
            "cifti_out": {
              "type": "string",
              "title": "cifti_out",
              "description": "the output cifti file"
            },
            "reset_timepoints": {
              "anyOf": [
                {
                  "type": "object",
                  "properties": {
                    "@type": {
                      "const": "reset_timepoints_1"
                    },
                    "timestep": {
                      "type": "number",
                      "title": "timestep",
                      "description": "the desired time between frames"
                    },
                    "timestart": {
                      "type": "number",
                      "title": "timestart",
                      "description": "the desired time offset of the initial frame"
                    },
                    "opt_unit_unit": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "default": null,
                      "title": "opt_unit_unit",
                      "description": "use a unit other than time: unit identifier (default SECOND)"
                    }
                  },
                  "additionalProperties": false,
                  "description": "reset the mapping along rows to timepoints, taking length from the nifti file",
                  "required": [
                    "timestep",
                    "timestart"
                  ]
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "reset the mapping along rows to timepoints, taking length from the nifti file"
            },
            "opt_reset_scalars": {
              "type": "boolean",
              "default": false,
              "title": "opt_reset_scalars",
              "description": "reset mapping along rows to scalars, taking length from the nifti file"
            }
          },
          "additionalProperties": false,
          "description": "convert a NIFTI (1 or 2) file made with this command back into CIFTI",
          "required": [
            "nifti_in",
            "cifti_template",
            "cifti_out"
          ]
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "convert a NIFTI (1 or 2) file made with this command back into CIFTI"
    },
    "to_text": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "@type": {
              "const": "to_text"
            },
            "cifti_in": {
              "type": "string",
              "title": "cifti_in",
              "description": "the input cifti file"
            },
            "text_out": {
              "type": "string",
              "title": "text_out",
              "description": "output - the output text file"
            },
            "opt_col_delim_delim_string": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "title": "opt_col_delim_delim_string",
              "description": "choose string to put between elements in a row: the string to use (default is a tab character)"
            }
          },
          "additionalProperties": false,
          "description": "convert to a plain text file",
          "required": [
            "cifti_in",
            "text_out"
          ]
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "convert to a plain text file"
    },
    "from_text": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "@type": {
              "const": "from_text"
            },
            "text_in": {
              "type": "string",
              "title": "text_in",
              "description": "the input text file"
            },
            "cifti_template": {
              "type": "string",
              "title": "cifti_template",
              "description": "a cifti file with the dimension(s) and mapping(s) that should be used"
            },
            "cifti_out": {
              "type": "string",
              "title": "cifti_out",
              "description": "the output cifti file"
            },
            "opt_col_delim_delim_string": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "title": "opt_col_delim_delim_string",
              "description": "specify string that is between elements in a row: the string to use (default is any whitespace)"
            },
            "reset_timepoints": {
              "anyOf": [
                {
                  "type": "object",
                  "properties": {
                    "@type": {
                      "const": "reset_timepoints_2"
                    },
                    "timestep": {
                      "type": "number",
                      "title": "timestep",
                      "description": "the desired time between frames"
                    },
                    "timestart": {
                      "type": "number",
                      "title": "timestart",
                      "description": "the desired time offset of the initial frame"
                    },
                    "opt_unit_unit": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "default": null,
                      "title": "opt_unit_unit",
                      "description": "use a unit other than time: unit identifier (default SECOND)"
                    }
                  },
                  "additionalProperties": false,
                  "description": "reset the mapping along rows to timepoints, taking length from the text file",
                  "required": [
                    "timestep",
                    "timestart"
                  ]
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "reset the mapping along rows to timepoints, taking length from the text file"
            },
            "opt_reset_scalars": {
              "type": "boolean",
              "default": false,
              "title": "opt_reset_scalars",
              "description": "reset mapping along rows to scalars, taking length from the text file"
            }
          },
          "additionalProperties": false,
          "description": "convert from plain text to cifti",
          "required": [
            "text_in",
            "cifti_template",
            "cifti_out"
          ]
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "convert from plain text to cifti"
    }
  },
  "additionalProperties": false
}