{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "description": "Evaluate expression on volume files.\n\nThis command evaluates <expression> at each voxel independently.  There must be at least one -var option (to get the volume space from), even if the <name> specified in it isn't used in <expression>.  All volumes must have the same volume space.  Filenames are not valid in <expression>, use a variable name and a -var option with matching <name> to specify an input file.  If the -subvolume option is given to any -var option, only one subvolume is used from that file.  If -repeat is specified, the file must either have only one subvolume, or have the -subvolume option specified.  All files that don't use -repeat must have the same number of subvolumes requested to be used.  The format of <expression> is as follows:\n\nExpressions consist of constants, variables, operators, parentheses, and functions, in infix notation, such as 'exp(-x + 3) * scale'.  Variables are strings of any length, using the characters a-z, A-Z, 0-9, and _, but may not take the name of a named constant.  Currently, there is only one named constant, PI.  The operators are +, -, *, /, ^, >, <, >=, <=, ==, !=, !, &&, ||.  These behave as in C, except that ^ is exponentiation, i.e. pow(x, y), and takes higher precedence than other binary operators (also, '-3^-4^-5' means '-(3^(-(4^-5)))').  The <=, >=, ==, and != operators are given a small amount of wiggle room, equal to one millionth of the smaller of the absolute values of the values being compared.\n\nComparison and logical operators return 0 or 1, you can do masking with expressions like 'x * (mask > 0)'.  For all logical operators, an input is considered true iff it is greater than 0.  The expression '0 < x < 5' is not syntactically wrong, but it will NOT do what is desired, because it is evaluated left to right, i.e. '((0 < x) < 5)', which will always return 1, as both possible results of a comparison are less than 5.  A warning is generated if an expression of this type is detected.  Use something like 'x > 0 && x < 5' to get the desired behavior.\n\nWhitespace between elements is ignored, ' sin ( 2 * x ) ' is equivalent to 'sin(2*x)', but 's in(2*x)' is an error.  Implied multiplication is not allowed, the expression '2x' will be parsed as a variable.  Parentheses are (), do not use [] or {}.  Functions require parentheses, the expression 'sin x' is an error.\n\nThe following functions are supported:\n\n   sin: 1 argument, the sine of the argument (units are radians)\n   cos: 1 argument, the cosine of the argument (units are radians)\n   tan: 1 argument, the tangent of the argument (units are radians)\n   asin: 1 argument, the inverse of sine of the argument, in radians\n   acos: 1 argument, the inverse of cosine of the argument, in radians\n   atan: 1 argument, the inverse of tangent of the argument, in radians\n   atan2: 2 arguments, atan2(y, x) returns the inverse of tangent of (y/x), in radians, determining quadrant by the sign of both arguments\n   sinh: 1 argument, the hyperbolic sine of the argument\n   cosh: 1 argument, the hyperbolic cosine of the argument\n   tanh: 1 argument, the hyperbolic tangent of the argument\n   asinh: 1 argument, the inverse hyperbolic sine of the argument\n   acosh: 1 argument, the inverse hyperbolic cosine of the argument\n   atanh: 1 argument, the inverse hyperbolic tangent of the argument\n   sinc: 1 argument, sinc(0) = 1, sin(x) / x otherwise\n   ln: 1 argument, the natural logarithm of the argument\n   exp: 1 argument, the constant e raised to the power of the argument\n   log: 1 argument, the base 10 logarithm of the argument\n   log2: 1 argument, the base 2 logarithm of the argument\n   sqrt: 1 argument, the square root of the argument\n   abs: 1 argument, the absolute value of the argument\n   floor: 1 argument, the largest integer not greater than the argument\n   round: 1 argument, the nearest integer, with ties rounded away from zero\n   ceil: 1 argument, the smallest integer not less than the argument\n   min: 2 arguments, min(x, y) returns y if (x > y), x otherwise\n   max: 2 arguments, max(x, y) returns y if (x < y), x otherwise\n   mod: 2 arguments, mod(x, y) = x - y * floor(x / y), or 0 if y == 0\n   clamp: 3 arguments, clamp(x, low, high) = min(max(x, low), high)\n",
  "type": "object",
  "properties": {
    "@type": {
      "const": "workbench.volume-math"
    },
    "expression": {
      "type": "string",
      "title": "expression",
      "description": "the expression to evaluate, in quotes"
    },
    "volume_out": {
      "type": "string",
      "title": "volume_out",
      "description": "the output volume"
    },
    "opt_fixnan_replace": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "opt_fixnan_replace",
      "description": "replace NaN results with a value: value to replace NaN with"
    },
    "var": {
      "anyOf": [
        {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "@type": {
                "const": "var"
              },
              "name": {
                "type": "string",
                "title": "name",
                "description": "the name of the variable, as used in the expression"
              },
              "volume": {
                "type": "string",
                "x-styx-type": "file",
                "title": "volume",
                "description": "the volume file to use as this variable"
              },
              "opt_subvolume_subvol": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "opt_subvolume_subvol",
                "description": "select a single subvolume: the subvolume number or name"
              },
              "opt_repeat": {
                "type": "boolean",
                "default": false,
                "title": "opt_repeat",
                "description": "reuse a single subvolume for each subvolume of calculation"
              }
            },
            "additionalProperties": false,
            "description": "a volume file to use as a variable",
            "required": [
              "name",
              "volume"
            ]
          }
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "a volume file to use as a variable"
    }
  },
  "additionalProperties": false,
  "required": [
    "expression",
    "volume_out"
  ]
}