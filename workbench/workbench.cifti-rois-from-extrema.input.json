{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "cifti-rois-from-extrema",
  "description": "Create cifti roi maps from extrema maps.\n\nFor each nonzero value in each map, make a map with an ROI around that location.  If the -gaussian option is specified, then normalized gaussian kernels are output instead of ROIs.  The <method> argument to -overlap-logic must be one of ALLOW, CLOSEST, or EXCLUDE.  ALLOW is the default, and means that ROIs are treated independently and may overlap.  CLOSEST means that ROIs may not overlap, and that no ROI contains vertices that are closer to a different seed vertex.  EXCLUDE means that ROIs may not overlap, and that any vertex within range of more than one ROI does not belong to any ROI.",
  "type": "object",
  "properties": {
    "@type": {
      "const": "workbench.cifti-rois-from-extrema"
    },
    "cifti": {
      "type": "string",
      "x-styx-type": "file",
      "title": "cifti",
      "description": "the input cifti"
    },
    "surf_limit": {
      "type": "number",
      "title": "surf_limit",
      "description": "geodesic distance limit from vertex, in mm"
    },
    "vol_limit": {
      "type": "number",
      "title": "vol_limit",
      "description": "euclidean distance limit from voxel center, in mm"
    },
    "direction": {
      "type": "string",
      "title": "direction",
      "description": "which dimension an extrema map is along, ROW or COLUMN"
    },
    "cifti_out": {
      "type": "string",
      "title": "cifti_out",
      "description": "the output cifti"
    },
    "opt_left_surface_surface": {
      "anyOf": [
        {
          "type": "string",
          "x-styx-type": "file"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "opt_left_surface_surface",
      "description": "specify the left surface to use: the left surface file"
    },
    "opt_right_surface_surface": {
      "anyOf": [
        {
          "type": "string",
          "x-styx-type": "file"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "opt_right_surface_surface",
      "description": "specify the right surface to use: the right surface file"
    },
    "opt_cerebellum_surface_surface": {
      "anyOf": [
        {
          "type": "string",
          "x-styx-type": "file"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "opt_cerebellum_surface_surface",
      "description": "specify the cerebellum surface to use: the cerebellum surface file"
    },
    "gaussian": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "@type": {
              "const": "gaussian"
            },
            "surf_sigma": {
              "type": "number",
              "title": "surf_sigma",
              "description": "the sigma for the surface gaussian kernel, in mm"
            },
            "vol_sigma": {
              "type": "number",
              "title": "vol_sigma",
              "description": "the sigma for the volume gaussian kernel, in mm"
            }
          },
          "additionalProperties": false,
          "title": "gaussian",
          "description": "generate gaussian kernels instead of flat ROIs",
          "required": [
            "surf_sigma",
            "vol_sigma"
          ]
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "gaussian",
      "description": "generate gaussian kernels instead of flat ROIs"
    },
    "opt_overlap_logic_method": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "opt_overlap_logic_method",
      "description": "how to handle overlapping ROIs, default ALLOW: the method of resolving overlaps"
    },
    "opt_merged_volume": {
      "type": "boolean",
      "default": false,
      "title": "opt_merged_volume",
      "description": "treat volume components as if they were a single component"
    }
  },
  "additionalProperties": false,
  "required": [
    "cifti",
    "surf_limit",
    "vol_limit",
    "direction",
    "cifti_out"
  ]
}