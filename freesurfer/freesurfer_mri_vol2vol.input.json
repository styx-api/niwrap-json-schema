{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "mri_vol2vol",
  "description": "Resamples a volume into another field-of-view using various types of matrices (FreeSurfer, FSL, SPM, and MNI).",
  "type": "object",
  "properties": {
    "@type": {
      "const": "freesurfer/mri_vol2vol"
    },
    "movvol": {
      "type": "string",
      "x-styx-type": "file",
      "title": "Moving volume",
      "description": "Input volume (or output template with --inv)"
    },
    "targvol": {
      "type": "string",
      "x-styx-type": "file",
      "title": "Target volume",
      "description": "Output template (or input with --inv)"
    },
    "outvol": {
      "type": "string",
      "x-styx-type": "file",
      "title": "Output volume",
      "description": "Output volume"
    },
    "dispvol": {
      "anyOf": [
        {
          "type": "string",
          "x-styx-type": "file"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Displacement volume",
      "description": "Displacement volume"
    },
    "downsample": {
      "anyOf": [
        {
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Downsample factor",
      "description": "Downsample factor (e.g., 2) (do not include a targ or registration)"
    },
    "register_dat": {
      "anyOf": [
        {
          "type": "string",
          "x-styx-type": "file"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Registration matrix",
      "description": "tkRAS-to-tkRAS matrix (tkregister2 format)"
    },
    "lta": {
      "anyOf": [
        {
          "type": "string",
          "x-styx-type": "file"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Linear Transform Array",
      "description": "Linear Transform Array (usually only 1 transform)"
    },
    "lta_inv": {
      "anyOf": [
        {
          "type": "string",
          "x-styx-type": "file"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Inverted LTA",
      "description": "LTA, invert (may not be the same as --lta --inv with --fstal)"
    },
    "fsl": {
      "anyOf": [
        {
          "type": "string",
          "x-styx-type": "file"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "FSL matrix",
      "description": "fslRAS-to-fslRAS matrix (FSL format)"
    },
    "xfm": {
      "anyOf": [
        {
          "type": "string",
          "x-styx-type": "file"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "XFM matrix",
      "description": "ScannerRAS-to-ScannerRAS matrix (MNI format)"
    },
    "inv": {
      "type": "boolean",
      "default": false,
      "title": "Inverse transform flag",
      "description": "Sample from targ to mov"
    },
    "tal": {
      "type": "boolean",
      "default": false,
      "title": "Talairach mapping flag",
      "description": "Map to a sub FOV of MNI305 (with --reg only)"
    },
    "talres": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Talairach resolution",
      "description": "Set voxel size 1mm or 2mm (default is 1)"
    },
    "talxfm": {
      "anyOf": [
        {
          "type": "string",
          "x-styx-type": "file"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Talairach transformation file",
      "description": "Path to the talairach transformation file. Default is talairach.xfm (looks in mri/transforms)"
    },
    "m3z": {
      "anyOf": [
        {
          "type": "string",
          "x-styx-type": "file"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "M3Z morph file",
      "description": "Non-linear morph encoded in the m3z format"
    },
    "inv_morph": {
      "type": "boolean",
      "default": false,
      "title": "Inverse morph flag",
      "description": "Compute and use the inverse of the m3z morph"
    },
    "fstarg": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "FreeSurfer target volume",
      "description": "Optionally use the specified volume from the subject in --reg as target. Default is orig.mgz"
    },
    "crop": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Crop factor",
      "description": "Crop and change voxel size"
    },
    "slice_crop": {
      "anyOf": [
        {
          "type": "array",
          "items": {
            "type": "number"
          },
          "maxItems": 2
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Slice crop range",
      "description": "Crop output slices to be within specified start and end indices"
    },
    "slice_reverse": {
      "type": "boolean",
      "default": false,
      "title": "Slice reverse flag",
      "description": "Reverse order of slices, update vox2ras"
    },
    "slice_bias": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Slice bias factor",
      "description": "Apply half-cosine bias field"
    },
    "interp": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Interpolation type",
      "description": "Interpolation method: cubic, trilin, or nearest (default is trilin)"
    },
    "fill_average": {
      "type": "boolean",
      "default": false,
      "title": "Fill average flag",
      "description": "Compute mean of all source voxels in a given target voxel"
    },
    "fill_conserve": {
      "type": "boolean",
      "default": false,
      "title": "Fill conserve flag",
      "description": "Compute sum of all source voxels in a given target voxel"
    },
    "fill_up": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Fill upsample factor",
      "description": "Source upsampling factor for --fill-{avg,cons} (default is 2)"
    },
    "mul": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Multiplication factor",
      "description": "Multiply output by the specified value"
    },
    "precision": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Output precision level",
      "description": "Output precision (default is float)"
    },
    "keep_precision": {
      "type": "boolean",
      "default": false,
      "title": "Keep input precision flag",
      "description": "Set output precision to that of the input"
    },
    "kernel": {
      "type": "boolean",
      "default": false,
      "title": "Trilinear interpolation kernel flag",
      "description": "Save the trilinear interpolation kernel at each voxel instead of the interpolated image"
    },
    "copy_ctab": {
      "type": "boolean",
      "default": false,
      "title": "Copy ctab flag",
      "description": "Setenv FS_COPY_HEADER_CTAB to copy any ctab in the mov header"
    },
    "gcam": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "GCAM parameters",
      "description": "GCAM warp procedure"
    },
    "spm_warp": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "SPM Warp parameters",
      "description": "SPM warp procedure"
    },
    "map_point": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Map point parameters",
      "description": "Standalone option to map a point to another space"
    },
    "map_point_inv_lta": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Inverted LTA map point parameters",
      "description": "Same as --map-point but inverts the LTA"
    },
    "no_resample": {
      "type": "boolean",
      "default": false,
      "title": "No resampling flag",
      "description": "Do not resample, just change vox2ras matrix"
    },
    "rot": {
      "anyOf": [
        {
          "type": "array",
          "items": {
            "type": "number"
          },
          "minItems": 3,
          "maxItems": 3
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Rotation angles",
      "description": "Rotation angles (degrees) to apply to registration matrix"
    },
    "trans": {
      "anyOf": [
        {
          "type": "array",
          "items": {
            "type": "number"
          },
          "minItems": 3,
          "maxItems": 3
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Translation distances",
      "description": "Translation (mm) to apply to registration matrix"
    },
    "shear": {
      "anyOf": [
        {
          "type": "array",
          "items": {
            "type": "number"
          },
          "minItems": 3,
          "maxItems": 3
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Shearing factors",
      "description": "Shearing factors. Sxy Sxz Syz with xz as in-plane"
    },
    "reg_final": {
      "anyOf": [
        {
          "type": "string",
          "x-styx-type": "file"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Final registration matrix",
      "description": "Final registration matrix after rotation and translation (but not inversion)"
    },
    "synth": {
      "type": "boolean",
      "default": false,
      "title": "Synthesize noise flag",
      "description": "Replace input with white Gaussian noise"
    },
    "seed": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Random seed",
      "description": "Seed for synth (default is to set from time of day)"
    },
    "save_reg": {
      "type": "boolean",
      "default": false,
      "title": "Save registration flag",
      "description": "Write out output volume registration matrix"
    },
    "debug": {
      "type": "boolean",
      "default": false,
      "title": "Debug flag",
      "description": "Turn on debugging output"
    },
    "version": {
      "type": "boolean",
      "default": false,
      "title": "Version flag",
      "description": "Print out version string and exit"
    }
  },
  "additionalProperties": false,
  "required": [
    "movvol",
    "targvol",
    "outvol"
  ]
}